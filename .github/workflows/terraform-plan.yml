name: "Terraform Plan"

on:
  pull_request:
    paths:
      - terraform/**
      - .github/workflows/terraform-*.yml
  workflow_dispatch:

env:
  GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  TF_CLOUD_ORGANIZATION: "bluelightcard"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"

jobs:
  pr-cleanup:
    name: Cleanup PR comments
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Cleanup
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComments = comments.filter(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            botComments?.forEach(botComment => {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
              console.log('Deleted comment id: ' + botComment.id)
            });

  terraform:
    name: "Plan"
    runs-on: ubuntu-latest
    needs:
      - pr-cleanup
    permissions:
      contents: read
      pull-requests: write
    strategy:
      matrix:
        include:
          ## blc
          - dir: blc
            environment: develop
            path: blc-shared
          - dir: blc
            environment: staging
            path: blc-shared
          - dir: blc
            environment: pr
            path: blc-shared
          - dir: blc
            environment: production
            path: blc-shared

          ## blc-au
          # - dir: blc-au
          #   environment: develop
          #   path: blc-au-shared
          - dir: blc-au
            environment: staging
            path: blc-au-shared
          - dir: blc-au
            environment: pr
            path: blc-au-shared
          - dir: blc-au
            environment: production
            path: blc-au-shared

          ## dds
          - dir: dds
            environment: develop
            path: dds-shared
          - dir: dds
            environment: staging
            path: dds-shared
          - dir: dds
            environment: pr
            path: dds-shared
          - dir: dds
            environment: production
            path: dds-shared

          ## shared
          - dir: shared
            environment: develop
            path: shared
          - dir: shared
            environment: staging
            path: shared
          - dir: shared
            environment: pr
            path: shared
          - dir: shared
            environment: production
            path: shared
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: "1.9.8"

      - name: Setup SSH configuration
        run: |
          if [[ -z "$GIT_SSH_KEY" ]] ; then echo "Missing GIT_SSH_KEY" ; exit 1 ; fi
          install -d -m 0700 ~/.ssh
          echo $GIT_SSH_KEY | base64 -d > ~/.ssh/id_rsa
          chmod 0400 ~/.ssh/id_rsa
          ssh-keygen -y -f ~/.ssh/id_rsa > /dev/null || { echo "Invalid GIT_SSH_KEY" ; exit 1 ; }
          cd ./terraform/${{ matrix.dir}}
        env:
          GIT_SSH_KEY: ${{ secrets.GIT_SSH_KEY }}

      - name: Terraform init
        run: terraform -chdir=./terraform/${{ matrix.dir}} init
        env:
          TF_WORKSPACE: ${{ matrix.environment }}

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.1
        id: plan-upload
        with:
          workspace: blc-mono-${{ matrix.path}}-${{ matrix.environment }}
          directory: ./terraform/${{ matrix.dir}}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.1
        id: plan-run
        with:
          workspace: blc-mono-${{ matrix.path}}-${{ matrix.environment }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.1
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}
      
      - name: Update PR
        if: ${{ github.event_name == 'pull_request' && (steps.plan-output.outputs.add != '0' || steps.plan-output.outputs.change != '0' || steps.plan-output.outputs.destroy != '0') }}
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Create comment for the PR
            const output = `#### Terraform Cloud Plan Output
               ##### ${{ matrix.dir }} (${{ matrix.environment }})
               \`\`\`
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }}).
               `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
