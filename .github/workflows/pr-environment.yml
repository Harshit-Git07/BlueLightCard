name: Pull Request Ephemeral Environment

on:
  pull_request:

permissions:
  contents: write
  pull-requests: write
  id-token: write
  deployments: write

  
env:
  PR_PREFIX: pr-${{ github.event.pull_request.number }}-blc-mono

jobs:
  # Deploy the backend
  backend:
    name: Deploy Backend for PR
    if: github.actor!= 'dependabot[bot]'
    runs-on: ubuntu-latest
    outputs:
      identity-api-endpoint: ${{ steps.sst-identity-outputs.outputs.identityApiUrl }}
      offers-api-endpoint: ${{ steps.sst-offers-outputs.outputs.offersApiUrl }}
      redemptions-api-endpoint: ${{ steps.sst-redemptions-outputs.outputs.redemptionsApiUrl }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure Non Prod AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::314658777488:role/github-actions-role
          aws-region: eu-west-2
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: node_modules- # Take any latest cache if failed to find it for current yarn.lock
      - run: npm install @esbuild/linux-x64 #run it here as locally the os is darwin and not linux, and only needed for github action
      - run: npm install
      - run: npm run build
      - name: Deploy Global
        run: npx sst deploy global --stage $PR_PREFIX
      - name: Deploy Identity
        run: npx sst deploy identity --stage $PR_PREFIX
      - name: Extract Identity URL
        id: sst-identity-outputs
        run: |
          cat .sst/outputs.json
          IDENTITY_URL=$(jq -r '.[].IdentityApiEndpoint | select(. != null)' .sst/outputs.json)
          echo "identityApiUrl=$IDENTITY_URL" >> $GITHUB_OUTPUT
      - name: Deploy Offers
        run: npx sst deploy offers --stage $PR_PREFIX
      - name: Extract Api URL and set output
        id: sst-offers-outputs
        run: |
          cat .sst/outputs.json
          OFFERS_URL=$(jq -r '.[].OffersApiEndpoint | select(. != null)' .sst/outputs.json)
          echo "offersApiUrl=$OFFERS_URL" >> $GITHUB_OUTPUT
      - name: Deploy Redemptions
        run: npx sst deploy redemptions --stage $PR_PREFIX
      - name: Extract Api URL and set output
        id: sst-redemptions-outputs
        run: |
          cat .sst/outputs.json
          REDEMPTION_URL=$(jq -r '.[].RedemptionsApiEndpoint | select(. != null)' .sst/outputs.json)
          echo "redemptionsApiUrl=$REDEMPTION_URL" >> $GITHUB_OUTPUT
      - name: Echo outputs
        run: |
          echo ${{ steps.sst-identity-outputs.outputs.identityApiUrl }}
          echo ${{ steps.sst-offers-outputs.outputs.offersApiUrl }}
          echo ${{ steps.sst-redemptions-outputs.outputs.redemptionsApiUrl }}

  # Deploy the frontend
  frontend:
    name: Deploy Frontend BLC UK for PR
    if: github.actor!= 'dependabot[bot]'
    strategy:
      matrix:
        brand: ['blc-uk']
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.cloudflare-publish.outputs.url }}
    needs:
      - backend
    env:
      NEXT_PUBLIC_IDENTITY_API_URL: https://tr1afrar24.execute-api.eu-west-2.amazonaws.com/staging/blc_uk/organisation
      NEXT_PUBLIC_ELIGIBILITY_FORM_OUTPUT_API_URL: https://tr1afrar24.execute-api.eu-west-2.amazonaws.com/staging
      NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
      NEXT_PUBLIC_COGNITO_CLIENT_SECRET: ${{ secrets.COGNITO_CLIENT_SECRET }}
      NEXT_PUBLIC_COGNITO_IDP_ID: ${{ secrets.COGNITO_IDP_ID }}
      NEXT_PUBLIC_LOGOUT_ROUTE: /mock-login
      NEXT_PUBLIC_OFFERS_ENDPOINT: https://w6cu72lyfngylgfvgjla66levi.appsync-api.eu-west-2.amazonaws.com/graphql
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: node_modules- # Take any latest cache if failed to find it for current yarn.lock
      - name: Cache NextJS Build
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/packages/web/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('packages/web/**/*.[jt]s', 'packages/web/**/*.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - run: npm install
      - name: Build
        run: NEXT_PUBLIC_APP_BRAND=${{matrix.brand}} npm run build -w packages/web
        env:
          NEXT_PUBLIC_IDENTITY_API_URL: ${{ needs.backend.outputs.identity-api-endpoint }}blc_uk/organisation
          NEXT_PUBLIC_ELIGIBILITY_FORM_OUTPUT_API_URL: ${{ needs.backend.outputs.identity-api-endpoint }}blc_uk/formOutputData
      - name: Publish
        uses: cloudflare/pages-action@1
        id: cloudflare-publish
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{matrix.brand}}
          directory: packages/web/dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  # Put comment on PR
  comment:
    name: Comment on PR
    if: github.actor!= 'dependabot[bot]'
    runs-on: ubuntu-latest
    needs:
      - backend
      - frontend
    steps:
      - name: Find Comment
        uses: peter-evans/find-comment@v2
        if: success() && github.event.number
        id: fc
        with:
          issue-number: ${{ github.event.number }}
          body-includes: 'ðŸš€ Successfully deployed preview environment'

      - name: Create Comment
        uses: peter-evans/create-or-update-comment@v3
        if: success() && github.event.number
        with:
          issue-number: ${{ github.event.number }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          body: |
            ## ðŸš€ Successfully deployed preview environment

            <table><tr><td><strong>Latest commit:</strong> </td><td>
            <code>${{ github.sha }}</code>
            </td></tr>
            <tr><td><strong>Status:</strong></td><td>&nbsp;âœ…&nbsp; Deploy successful!</td></tr>
            <tr><td><strong>Preview URL:</strong></td><td>
            <a href='${{ needs.frontend.outputs.url }}'>${{ needs.frontend.outputs.url }}</a>
            </td></tr>
            <tr><td><strong>Identity API URL:</strong></td><td>
            <a href='${{ needs.backend.outputs.identity-api-endpoint }}'>${{ needs.backend.outputs.identity-api-endpoint }}</a>
            </td></tr>
            <tr><td><strong>Offers API URL:</strong></td><td>
            <a href='${{ needs.backend.outputs.offers-api-endpoint }}'>${{ needs.backend.outputs.offers-api-endpoint }}</a>
            </td></tr>
            <tr><td><strong>Redemptions API URL:</strong></td><td>
            <a href='${{ needs.backend.outputs.redemptions-api-endpoint }}'>${{ needs.backend.outputs.redemptions-api-endpoint }}</a>
            </td></tr>
            </table>

  # Lighthouse Audit of Web frontend
  # TODO: Currently not working with authenticated pages due to being redirected to login page
  lighthouse:
    name: Web Audit using Lighthouse
    if: github.actor!= 'dependabot[bot]'
    runs-on: ubuntu-latest
    needs:
      - frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: node_modules- # Take any latest cache if failed to find it for current yarn.lock
      - run: npm install

      - name: Audit URLs using Lighthouse
        uses: treosh/lighthouse-ci-action@v10
        id: lighthouse_audit
        with:
          urls: |
            ${{ needs.frontend.outputs.url }}/eligibility
          budgetPath: '.github/lighthouse/budget.json'
          configPath: '.github/lighthouse/.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3

      - name: Format lighthouse result
        id: lighthouse_result
        if: ${{ always() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { default: formatLighthouseResult } = await import('${{ github.workspace }}/.github/scripts/formatLighthouseResult.js')
            const links = ${{ steps.lighthouse_audit.outputs.links }};
            const manifest = ${{ steps.lighthouse_audit.outputs.manifest }}
            await formatLighthouseResult({ links, manifest, core })

      - name: Format budget result
        id: budget_result
        if: ${{ always() }}
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { default: formatBudgetResult } = await import('${{ github.workspace }}/.github/scripts/formatBudgetResult.js')
            const assertions = ${{ steps.lighthouse_audit.outputs.assertionResults }}
            await formatBudgetResult({ assertions, core })

      - name: Add Lighthouse comment to PR
        id: lighthouse_comment_to_pr
        if: ${{ always() }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: |
            ${{ steps.lighthouse_result.outputs.comment }}

      - name: Add Budget comment to PR
        id: budget_comment_to_pr
        if: ${{ always() }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: budget
          message: |
            ${{ steps.budget_result.outputs.comment }}

  # Run the E2E Test Suite
  e2e:
    name: E2E Tests
    if: github.actor!= 'dependabot[bot]'
    runs-on: ubuntu-latest
    needs:
      - frontend
    env:
      BASE_URL: ${{ needs.backend.outputs.frontend.url }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: node_modules- # Take any latest cache if failed to find it for current yarn.lock
      - run: npm install
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - run: npm run test:e2e -w packages/web
      - run: npm run report:e2e -w packages/web
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cucumber-report
          path: packages/web/e2e/test-results
          retention-days: 30
