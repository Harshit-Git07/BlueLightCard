name: Deploy Redemptions to Production

on:
  workflow_call:
    inputs:
      commit_hash_or_tag:
        description: The commit SHA that you wish to revert to
        type: string
        default: 'main'
      aws_role:
        description: The AWS role to assume when deploying
        type: string
        required: true

jobs:
  release-redemtptions-to-production:
    name: Release
    environment: Production
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deployment:
          - brand: BLC_UK
            region: eu-west-2
            stage: production
          - brand: BLC_AU
            region: ap-southeast-2
            stage: production
          - brand: DDS_UK
            region: eu-west-2
            stage: production-dds
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_hash_or_tag }}
      - name: Setup
        uses: ./.github/actions/setup
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure Prod AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ matrix.deployment.region }}
          role-to-assume: ${{ inputs.aws_role }}
      - name: Get secret
        run: |
          SECRET_NAME=$(aws secretsmanager describe-secret --secret-id blc-mono-redemptions/NewVaultSecrets --query Name --output text)
          echo "SECRET_NAME=$SECRET_NAME" >> $GITHUB_ENV
          echo "DD_VERSION=$(date +%m-%d-%Y)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "DD_ENV=production" >> $GITHUB_ENV
          echo "DD_GIT_COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "DD_GIT_REPOSITORY_URL=https://github.com/${{ github.repository }}" >> $GITHUB_ENV
        continue-on-error: true
        id: vault-secret
      - name: Update Secret
        if: ${{ env.SECRET_NAME == 'blc-mono-redemptions/NewVaultSecrets' }}
        run: |
          aws secretsmanager put-secret-value \
            --secret-id blc-mono-redemptions/NewVaultSecrets \
            --secret-string '{
              "codeRedeemedData":"${{ secrets.CODE_REDEEMED_DATA }}",
              "codeRedeemedPassword":"${{ secrets.CODE_REDEEMED_PASSWORD }}",
              "assignUserCodesData":"${{ secrets.ASSIGN_USER_CODES_DATA }}",
              "assignUserCodesPassword":"${{ secrets.ASSIGN_USER_CODES_PASSWORD }}",
              "checkAmountIssuedData":"${{ secrets.CHECK_AMOUNT_ISSUED_DATA }}",
              "checkAmountIssuedPassword":"${{ secrets.CHECK_AMOUNT_ISSUED_PASSWORD }}",
              "retrieveAllVaultsData":"${{ secrets.RETRIEVE_ALL_VAULTS_DATA }}",
              "retrieveAllVaultsPassword":"${{ secrets.RETRIEVE_ALL_VAULTS_PASSWORD }}",
              "viewVaultBatchesData":"${{ secrets.VIEW_VAULT_BATCHES_DATA }}",
              "viewVaultBatchesPassword":"${{ secrets.VIEW_VAULT_BATCHES_PASSWORD }}",
              "checkVaultStockData":"${{ secrets.CHECK_VAULT_STOCK_DATA }}",
              "checkVaultStockPassword":"${{ secrets.CHECK_VAULT_STOCK_PASSWORD }}",
              "brazeApiKey":"${{ secrets.BRAZE_API_KEY }}",
              "eagleEyeApiKey":"${{ secrets.EAGLE_EYE_API_KEY }}",
              "uniqodoApiKey":"${{ secrets.UNIQODO_API_KEY }}"
            }'
      - name: Create Secret
        if: ${{ env.SECRET_NAME != 'blc-mono-redemptions/NewVaultSecrets' }}
        run: |
          aws secretsmanager create-secret \
            --name blc-mono-redemptions/NewVaultSecrets \
            --secret-string '{
              "codeRedeemedData":"${{ secrets.CODE_REDEEMED_DATA }}",
              "codeRedeemedPassword":"${{ secrets.CODE_REDEEMED_PASSWORD }}",
              "assignUserCodesData":"${{ secrets.ASSIGN_USER_CODES_DATA }}",
              "assignUserCodesPassword":"${{ secrets.ASSIGN_USER_CODES_PASSWORD }}",
              "checkAmountIssuedData":"${{ secrets.CHECK_AMOUNT_ISSUED_DATA }}",
              "checkAmountIssuedPassword":"${{ secrets.CHECK_AMOUNT_ISSUED_PASSWORD }}",
              "retrieveAllVaultsData":"${{ secrets.RETRIEVE_ALL_VAULTS_DATA }}",
              "retrieveAllVaultsPassword":"${{ secrets.RETRIEVE_ALL_VAULTS_PASSWORD }}",
              "viewVaultBatchesData":"${{ secrets.VIEW_VAULT_BATCHES_DATA }}",
              "viewVaultBatchesPassword":"${{ secrets.VIEW_VAULT_BATCHES_PASSWORD }}",
              "checkVaultStockData":"${{ secrets.CHECK_VAULT_STOCK_DATA }}",
              "checkVaultStockPassword":"${{ secrets.CHECK_VAULT_STOCK_PASSWORD }}",
              "brazeApiKey":"${{ secrets.BRAZE_API_KEY }}",
              "eagleEyeApiKey":"${{ secrets.EAGLE_EYE_API_KEY }}",
              "uniqodoApiKey":"${{ secrets.UNIQODO_API_KEY }}"
            }'
      - name: Build
        run: npm run build
      - name: Deploy
        env:
          BRAND: ${{ matrix.deployment.brand }}
          DD_VERSION: '${{ env.DD_VERSION }}'
          DD_ENV: '${{ env.DD_ENV }}'
          DD_GIT_COMMIT_SHA: '${{ env.DD_GIT_COMMIT_SHA }}'
          DD_GIT_REPOSITORY_URL: '${{ env.DD_GIT_REPOSITORY_URL }}'
          DD_API_KEY: '${{ secrets.DATADOG_AWS_INSTRUMENTATION_TOKEN }}'
          USE_DATADOG_AGENT: 'true'
          # TODO: Remove these once Cognito has been deprecated.
          BLC_UK_COGNITO_USER_POOL_ID: 'eu-west-2_D3aAVuWHo'
          BLC_UK_OLD_COGNITO_USER_POOL_ID: 'eu-west-2_jrwTfFRgM'
          DDS_COGNITO_USER_POOL_ID: 'eu-west-2_3WlS5ZkAh'
          DDS_OLD_COGNITO_USER_POOL_ID: 'eu-west-2_y2KyCUbVT'
          BLC_UK_IDENTITY_API_ID: 'ue8dcieh75'
        run: npx sst deploy global --stage ${{matrix.deployment.stage}} --region ${{matrix.deployment.region}} && npx sst deploy redemptions --stage ${{matrix.deployment.stage}} --region ${{matrix.deployment.region}}
      - name: Datadog deployment metrics
        uses: ./.github/actions/datadog
        with:
          environment: 'production'
          service_name: 'redemptions'
          workflow_run_id: ${{ github.run_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DATADOG_DORA_METRICS_CLIENT_TOKEN: ${{ secrets.DATADOG_DORA_METRICS_CLIENT_TOKEN }}
      - name: Send Slack message on failure
        if: ${{ failure() }}
        uses: bluelightcard/github-actions-slack-notification@v1
        with:
          webhook_url: ${{ secrets.CI_FAILURE_NOTIFICATIONS_WEBHOOK }}
          title: "@here :x: Production deployment failed for Redemptions (${{matrix.deployment.brand}})!"
      - name: Send Slack message on success
        if: ${{ success() }}
        uses: bluelightcard/github-actions-slack-notification@v1
        with:
          webhook_url: ${{ secrets.CI_SUCCESS_NOTIFICATIONS_WEBHOOK }}
          title: ":rocket: Production deployment for Redemptions (${{matrix.deployment.brand}}) was successful!"
