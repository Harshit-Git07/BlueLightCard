name: 'Web'
on:
  push:
    paths:
      - packages/web/**
      - packages/shared-ui/**
      - .github/actions/**
      - package-lock.json
      - sst.config.ts
      - package.json
      - .github/workflows/web.yml

permissions: write-all

jobs:
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_COGNITO_CLIENT_REGION: eu-west-2
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Unit Tests
        run: npm run test:coverage -w packages/web
      # - name: SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@master
      #   if: github.actor != 'dependabot[bot]'
      #   with:
      #     projectBaseDir: packages/web
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate SST Types
        env:
          BRAND: BLC_UK
        run: npx sst types --stage staging
      - name: JavaScript and Typescript
        run: npm run lint -w packages/web

  lint-styles:
    name: Linting Styles
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Lint Styles
        run: npm run lint:style -w packages/web

  storybook:
    name: Storybook Preview
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.storybook-publish.outputs.url }}
    needs:
      - test
      - lint
      - lint-styles
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish
        uses: ./.github/actions/storybook
        id: storybook-publish
        with:
          cloudflareApiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          cloudflareAccountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          packageName: web
          brandDeployments: true
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          
  deploy:
    name: 'Deploy ${{matrix.environment}} [${{matrix.brand}}]'
    strategy:
      matrix:
        brand: ['blc-uk', 'blc-au', 'dds-uk']
        environment: ['Preview', 'Production']
        exclude: ${{ github.ref != 'refs/heads/main' && fromJSON('[{"environment":"Production"}]') || fromJSON('[]') }}
    environment:
      name: ${{matrix.brand}} (${{matrix.environment}})
      url: ${{ steps.deploy.outputs.pages-deployment-alias-url }}
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_API_PROXY_URL: ${{ vars.PUBLIC_API_PROXY_URL }}
      NEXT_PUBLIC_AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_API_KEY }}
      NEXT_PUBLIC_AMPLITUDE_DEPLOYMENT_KEY: ${{ secrets.AMPLITUDE_DEPLOYMENT_KEY }}
      NEXT_PUBLIC_OFFERS_ENDPOINT: ${{ vars.PUBLIC_OFFERS_ENDPOINT }}
      NEXT_PUBLIC_OFFERS_API_GATEWAY_ENDPOINT: ${{ vars.PUBLIC_OFFERS_API_GATEWAY_ENDPOINT }}
      NEXT_PUBLIC_OFFERS_BRAND: ${{ vars.PUBLIC_OFFERS_BRAND }}
      NEXT_PUBLIC_BLACK_FRIDAY_TIME_LOCK_START_DATE: '2023-11-14T01:00:00'
      NEXT_PUBLIC_BLACK_FRIDAY_TIME_LOCK_END_DATE: '2023-11-27T23:59:59'
      NEXT_PUBLIC_IDENTITY_API_URL: ${{ vars.PUBLIC_IDENTITY_API_URL }}
      NEXT_PUBLIC_IDENTITY_API_KEY: ${{ secrets.IDENTITY_API_KEY }}
      NEXT_PUBLIC_USER_PROFILE_ENDPOINT: ${{ vars.PUBLIC_USER_PROFILE_ENDPOINT }}
      NEXT_PUBLIC_ORGANISATION_ENDPOINT: ${{ vars.PUBLIC_ORGANISATION_ENDPOINT }}
      NEXT_PUBLIC_ELIGIBILITY_FORM_OUTPUT_ENDPOINT: ${{ vars.PUBLIC_ELIGIBILITY_FORM_OUTPUT_ENDPOINT }}
      NEXT_PUBLIC_DATADOG_APP_ID: ${{ secrets.DATADOG_APP_ID }}
      NEXT_PUBLIC_DATADOG_CLIENT_TOKEN: ${{ secrets.DATADOG_CLIENT_TOKEN }}
      NEXT_PUBLIC_DATADOG_DEFAULT_SERVICE: ${{ vars.PUBLIC_DATADOG_DEFAULT_SERVICE }}
      NEXT_PUBLIC_DATADOG_ENV: ${{ vars.PUBLIC_DATADOG_ENV }}
      NEXT_PUBLIC_SEARCH_ENDPOINT: ${{ vars.PUBLIC_SEARCH_ENDPOINT }}
      NEXT_PUBLIC_RETRIEVE_FAVOURITE_ENDPOINT: ${{ vars.PUBLIC_RETRIEVE_FAVOURITE_ENDPOINT }}
      NEXT_PUBLIC_UPDATE_FAVOURITE_ENDPOINT: ${{ vars.PUBLIC_UPDATE_FAVOURITE_ENDPOINT }}
      NEXT_PUBLIC_RETRIEVE_OFFER_ENDPOINT: ${{ vars.PUBLIC_RETRIEVE_OFFER_ENDPOINT }}
      NEXT_PUBLIC_APP_MICROSERVICE_BRAND: ${{ vars.PUBLIC_APP_MICROSERVICE_BRAND }}
      NEXT_PUBLIC_COGNITO_CLIENT_REGION: ${{ vars.PUBLIC_COGNITO_CLIENT_REGION }}
      NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
      NEXT_PUBLIC_COGNITO_CLIENT_SECRET: ${{ secrets.COGNITO_CLIENT_SECRET }}
      NEXT_PUBLIC_FLAGSMITH_KEY: ${{ secrets.FLAGSMITH_KEY }}
      NEXT_PUBLIC_COGNITO_LOGIN_URL: ${{ vars.PUBLIC_COGNITO_LOGIN_URL }}
      NEXT_PUBLIC_COGNITO_LOGOUT_URL: ${{ vars.PUBLIC_COGNITO_LOGOUT_URL }}
      NEXT_PUBLIC_AUTH0_LOGIN_URL: ${{ vars.PUBLIC_AUTH0_LOGIN_URL }}
      NEXT_PUBLIC_AUTH0_LOGOUT_URL: ${{ vars.PUBLIC_AUTH0_LOGOUT_URL }}
      NEXT_PUBLIC_AUTH0_DOMAIN: ${{ vars.PUBLIC_AUTH0_DOMAIN }}
      NEXT_PUBLIC_AUTH0_CLIENT_ID: ${{ vars.PUBLIC_AUTH0_CLIENT_ID }}
      NEXT_PUBLIC_AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
      NEXT_PUBLIC_AUTH0_REDIRECT_URL: ${{ vars.PUBLIC_AUTH0_REDIRECT_URL }}
      NEXT_PUBLIC_BRAZE_SDK_ENDPOINT: ${{ vars.PUBLIC_BRAZE_SDK_ENDPOINT }}
      NEXT_PUBLIC_BRAZE_SDK_API_KEY: ${{ secrets.BRAZE_SDK_API_KEY }}
      NEXT_PUBLIC_AMPLITUDE_EXPERIMENT_REDEMPTION_VAULT_WEB: ${{ vars.PUBLIC_AMPLITUDE_EXPERIMENT_REDEMPTION_VAULT_WEB }}
      NEXT_PUBLIC_BRAND_URL: ${{ vars.PUBLIC_BRAND_URL }}
      NEXT_ZENDESK_V1_BLC_UK_URL: ${{ vars.PUBLIC_ZENDESK_V1_URL }}
      NEXT_PUBLIC_ENV: ${{ vars.PUBLIC_ENV }}
      NEXT_PUBLIC_STRIPE_KEY: ${{ vars.PUBLIC_STRIPE_PUBLISHABLE_KEY }}
      NEXT_PUBLIC_CURRENCY_SYMBOL: ${{ vars.PUBLIC_CURRENCY_SYMBOL }}
      NEXT_PUBLIC_MEMBERSHIP_PRICE: ${{ vars.PUBLIC_MEMBERSHIP_PRICE }}
      NEXT_PUBLIC_FSI_COMPANY_IDS: ${{ vars.PUBLIC_FSI_COMPANY_IDS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: remove mock login
        if: matrix.environment == 'Production'
        run: rm -rf packages/web/src/pages/mock-login.tsx
      - name: Generate SST Types
        env:
          BRAND: BLC_UK
        run: npx sst types --stage staging
      - name: Copy associated file for brand
        working-directory: ./packages/web
        run: cp ./assets/ios-assoc/apple-app-site-association-${{ matrix.brand }} ./public/.well-known/apple-app-site-association
      - name: Build
        run: NEXT_PUBLIC_APP_BRAND=${{matrix.brand}} npm run build -w packages/web
      - name: Publish
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy packages/web/out --project-name ${{matrix.brand}} ${{ github.ref == 'refs/heads/main' && matrix.environment == 'Preview' && '--branch staging' || '' }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Datadog deployment metrics
        if: github.ref == 'refs/heads/main'
        uses: ./.github/actions/datadog
        with:
          environment: ${{ matrix.environment == 'Production' && 'production' || 'staging'}}
          service_name: 'web'
          workflow_run_id: ${{ github.run_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DATADOG_DORA_METRICS_CLIENT_TOKEN: ${{ secrets.DATADOG_DORA_METRICS_CLIENT_TOKEN }}
      - name: Send Slack message on failure
        if: ${{ failure() }}
        uses: bluelightcard/github-actions-slack-notification@v1
        with:
          webhook_url: ${{ secrets.CI_FAILURE_NOTIFICATIONS_WEBHOOK }}
          title: ':x: :test_tube: Staging deployment failed for Web (${{matrix.brand}})!'
      - name: Send Slack message on success
        if: ${{ success() }}
        uses: bluelightcard/github-actions-slack-notification@v1
        with:
          webhook_url: ${{ secrets.CI_SUCCESS_NOTIFICATIONS_WEBHOOK }}
          title: ':test_tube: Staging deployment for Web (${{matrix.brand}}) was successful!'
      - name: Create commit comment
        id: comment
        uses: peter-evans/commit-comment@v3
        with:
          body: |
            :sparkles: Commit deployed!
            ${{matrix.brand}} (${{matrix.environment}}): ${{ steps.deploy.outputs.deployment-url }}

