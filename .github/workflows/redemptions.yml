name: Redemptions
on:
  push:
    branches:
      - main
    paths:
      - packages/api/redemptions/**
      - stacks/**
      - .github/workflows/redemptions.yml
      - package-lock.json
      - sst.config.ts
      - package.json
  pull_request:
    paths:
      - packages/api/redemptions/**
      - stacks/**
      - .github/workflows/redemptions.yml
      - package-lock.json
      - sst.config.ts
      - package.json

permissions: write-all

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: node_modules- # Take any latest cache if failed to find it for current yarn.lock
      - run: npm install
      - run: npm run test -w packages/api/redemptions

  changelog:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Changelog
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.tag-release.outputs.releases_created }}
    steps:
      - uses: GoogleCloudPlatform/release-please-action@v3
        id: tag-release
        with:
          path: packages/api/redemptions
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node
          monorepo-tags: true
          package-name: bluelightcard/redemptions
          changelog-types: '[{"type":"feat","section":"Features","hidden":false},{"type":"fix","section":"Bug Fixes","hidden":false},{"type":"chore","section":"Other Changes","hidden":false},{"type":"refactor","section":"Other Changes","hidden":false}]'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - test
      - changelog
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: node_modules- # Take any latest cache if failed to find it for current yarn.lock
      - run: npm install @esbuild/linux-x64 #run it here as locally the os is darwin and not linux, and only needed for github action
      - run: npm install
      - run: npm run build

  staging:
    name: Staging Deployment
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - test
      - build
      - changelog
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure Non Prod AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::314658777488:role/github-actions-role
          aws-region: eu-west-2
      - name: Get secret
        run: |
          SECRET_NAME=$(aws secretsmanager describe-secret --secret-id blc-mono-redemptions/NewVaultSecrets --query Name --output text)
          echo "SECRET_NAME=$SECRET_NAME" >> $GITHUB_ENV
        continue-on-error: true
        id: vault-secret
      - name: Update Secret
        if: ${{ env.SECRET_NAME == 'blc-mono-redemptions/NewVaultSecrets' }}
        run: |
          aws secretsmanager put-secret-value \
            --secret-id blc-mono-redemptions/NewVaultSecrets \
            --secret-string '{
              "codeRedeemedData":"${{ secrets.CODE_REDEEMED_DATA }}",
              "codeRedeemedPassword":"${{ secrets.CODE_REDEEMED_PASSWORD }}",
              "assignUserCodesData":"${{ secrets.ASSIGN_USER_CODES_DATA }}",
              "assignUserCodesPassword":"${{ secrets.ASSIGN_USER_CODES_PASSWORD }}"
            }'
      - name: Create Secret
        if: ${{ env.SECRET_NAME != 'blc-mono-redemptions/NewVaultSecrets' }}
        run: |
          aws secretsmanager create-secret \
            --name blc-mono-redemptions/NewVaultSecrets \
            --secret-string '{
              "codeRedeemedData":"${{ secrets.CODE_REDEEMED_DATA }}",
              "codeRedeemedPassword":"${{ secrets.CODE_REDEEMED_PASSWORD }}",
              "assignUserCodesData":"${{ secrets.ASSIGN_USER_CODES_DATA }}",
              "assignUserCodesPassword":"${{ secrets.ASSIGN_USER_CODES_PASSWORD }}"
            }'
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: node_modules- # Take any latest cache if failed to find it for current yarn.lock
      - run: npm install @esbuild/linux-x64 #run it here as locally the os is darwin and not linux, and only needed for github action
      - run: npm install
      - run: npm run build
      - name: Deploy
        env:
          CODES_REDEEMED_HOST: https://bbg71eiza6.execute-api.eu-west-2.amazonaws.com
          ENVIRONMENT: staging
          CODE_REDEEMED_PATH: NewVault/codesRedeemed
          CODE_ASSIGNED_REDEEMED_PATH: NewVault/assignUserCodes
        run: npx sst deploy global --stage staging && npx sst deploy redemptions --stage staging
      - name: Deploy Spec
        env:
          REDOCLY_AUTHORIZATION: ${{ secrets.REDOCLY_AUTHORIZATION }}
        run: npm run -s oas --region=eu-west-2 --stage=staging --api-version=v1

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.changelog.outputs.releases_created
    name: Release
    environment: Production
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: ['eu-west-2', 'ap-southeast-2']
    needs:
      - test
      - staging
      - changelog
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure Prod AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          role-to-assume: arn:aws:iam::676719682338:role/github-action-role
      - name: Get secret
        run: |
          SECRET_NAME=$(aws secretsmanager describe-secret --secret-id blc-mono-redemptions/NewVaultSecrets --query Name --output text)
          echo "SECRET_NAME=$SECRET_NAME" >> $GITHUB_ENV
        continue-on-error: true
        id: vault-secret
      - name: Update Secret
        if: ${{ env.SECRET_NAME == 'blc-mono-redemptions/NewVaultSecrets' }}
        run: |
          aws secretsmanager put-secret-value \
            --secret-id blc-mono-redemptions/NewVaultSecrets \
            --secret-string '{
              "codeRedeemedData":"${{ secrets.CODE_REDEEMED_DATA }}",
              "codeRedeemedPassword":"${{ secrets.CODE_REDEEMED_PASSWORD }}",
              "assignUserCodesData":"${{ secrets.ASSIGN_USER_CODES_DATA }}",
              "assignUserCodesPassword":"${{ secrets.ASSIGN_USER_CODES_PASSWORD }}"
            }'
      - name: Create Secret
        if: ${{ env.SECRET_NAME != 'blc-mono-redemptions/NewVaultSecrets' }}
        run: |
          aws secretsmanager create-secret \
            --name blc-mono-redemptions/NewVaultSecrets \
            --secret-string '{
              "codeRedeemedData":"${{ secrets.CODE_REDEEMED_DATA }}",
              "codeRedeemedPassword":"${{ secrets.CODE_REDEEMED_PASSWORD }}",
              "assignUserCodesData":"${{ secrets.ASSIGN_USER_CODES_DATA }}",
              "assignUserCodesPassword":"${{ secrets.ASSIGN_USER_CODES_PASSWORD }}"
            }'
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node_modules-${{hashFiles('package-lock.json')}}
          restore-keys: node_modules- # Take any latest cache if failed to find it for current yarn.lock
      - run: npm install @esbuild/linux-x64 #run it here as locally the os is darwin and not linux, and only needed for github action
      - run: npm install
      - run: npm run build
      - name: Deploy
        run: npx sst deploy global --stage production --region ${{matrix.region}} && npx sst deploy redemptions --stage production --region ${{matrix.region}}
      - name: Deploy Spec
        env:
          REDOCLY_AUTHORIZATION: ${{ secrets.REDOCLY_AUTHORIZATION }}
        run: npm run -s oas --region=${{matrix.region}} --stage=production --api-version=v1
