name: Pull Request Ephemeral Environment

on:
  pull_request:

permissions:
  contents: write
  pull-requests: write
  id-token: write
  deployments: write

  
env:
  PR_PREFIX: pr-${{ github.event.pull_request.number }}-blc-mono

jobs:
  install:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
        with:
          restore_cache: false

  backend-shared:
    name: Deploy Backend for PR (global & identity)
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    needs: install
    outputs:
      identity-api-endpoint: ${{ steps.sst-identity-outputs.outputs.identityApiUrl }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Configure Non Prod AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::314658777488:role/github-actions-role
          aws-region: eu-west-2
      # TODO: Should the build be cached?
      - run: npm run build
      - name: Deploy Global
        run: npx sst deploy global --stage $PR_PREFIX
      - name: Deploy Identity
        run: npx sst deploy identity --stage $PR_PREFIX
      - name: Extract Identity URL
        id: sst-identity-outputs
        run: |
          cat .sst/outputs.json
          IDENTITY_URL=$(jq -r '.[].IdentityApiEndpoint | select(. != null)' .sst/outputs.json)
          echo "identityApiUrl=$IDENTITY_URL" >> $GITHUB_OUTPUT
      - name: Echo outputs
        run: |
          echo ${{ steps.sst-identity-outputs.outputs.identityApiUrl }}

  backend-offers:
    name: Deploy Backend for PR (offers)
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    needs:
      - install
      - backend-shared
    outputs:
      offers-api-endpoint: ${{ steps.sst-offers-outputs.outputs.offersApiUrl }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Configure Non Prod AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::314658777488:role/github-actions-role
          aws-region: eu-west-2
      - run: npm run build
      - name: Deploy Offers
        run: npx sst deploy offers --stage $PR_PREFIX
      - name: Extract Api URL and set output
        id: sst-offers-outputs
        run: |
          cat .sst/outputs.json
          OFFERS_URL=$(jq -r '.[].OffersApiEndpoint | select(. != null)' .sst/outputs.json)
          echo "offersApiUrl=$OFFERS_URL" >> $GITHUB_OUTPUT
      - name: Echo outputs
        run: |
          echo ${{ steps.sst-offers-outputs.outputs.offersApiUrl }}

  backend-redemptions:
    name: Deploy Backend for PR (redemptions)
    if: github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    needs:
      - install
      - backend-shared
    outputs:
      redemptions-api-endpoint: ${{ steps.sst-redemptions-outputs.outputs.redemptionsApiUrl }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Configure Non Prod AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::314658777488:role/github-actions-role
          aws-region: eu-west-2
      - run: npm run build
      - name: Deploy Redemptions
        run: npx sst deploy redemptions --stage $PR_PREFIX
      - name: Extract Api URL and set output
        id: sst-redemptions-outputs
        run: |
          cat .sst/outputs.json
          REDEMPTION_URL=$(jq -r '.[].RedemptionsApiEndpoint | select(. != null)' .sst/outputs.json)
          echo "redemptionsApiUrl=$REDEMPTION_URL" >> $GITHUB_OUTPUT
      - name: Echo outputs
        run: |
          echo ${{ steps.sst-redemptions-outputs.outputs.redemptionsApiUrl }}

  # Deploy the frontend
  frontend:
    name: Deploy Frontend BLC UK for PR
    environment: Staging
    if: github.actor!= 'dependabot[bot]'
    strategy:
      matrix:
        include:
          - brand: 'blc-uk'
            identity_brand: 'blc_uk'
            identity_api_key: 'IDENTITY_EU_WEST_2_API_KEY'
            region: 'eu-west-2'
            cognito_client_id: 'BLC_UK_COGNITO_CLIENT_ID'
            cognito_client_secret: 'BLC_UK_COGNITO_CLIENT_SECRET'
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.cloudflare-publish.outputs.url }}
    needs: install
    # TODO: Does this need to depend on the backend - it seems to be using the staging API...
    #   - backend-shared
    #   - backend-offers
    #   - backend-redemptions
    env:
      NEXT_PUBLIC_AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_API_KEY }}
      NEXT_PUBLIC_LOGOUT_ROUTE: /mock-login
      NEXT_PUBLIC_OFFERS_ENDPOINT: https://staging-offers.blcshine.io/graphql
      NEXT_PUBLIC_BLACK_FRIDAY_TIME_LOCK_START_DATE: '2023-11-14T01:00:00'
      NEXT_PUBLIC_BLACK_FRIDAY_TIME_LOCK_END_DATE: '2023-11-27T23:59:59'
      NEXT_PUBLIC_IDENTITY_API_URL: https://staging-identity.blcshine.io
      NEXT_PUBLIC_IDENTITY_API_KEY: ${{ secrets[matrix.identity_api_key] }}
      NEXT_PUBLIC_USER_PROFILE_ENDPOINT: /user
      NEXT_PUBLIC_ORGANISATION_ENDPOINT: /${{matrix.identity_brand}}/organisation
      NEXT_PUBLIC_ELIGIBILITY_FORM_OUTPUT_ENDPOINT: /${{matrix.identity_brand}}/formOutputData
      NEXT_PUBLIC_COGNITO_CLIENT_REGION: ${{matrix.region}}
      NEXT_PUBLIC_COGNITO_CLIENT_ID: ${{ secrets[matrix.cognito_client_id] }}
      NEXT_PUBLIC_COGNITO_CLIENT_SECRET: ${{ secrets[matrix.cognito_client_secret] }}
      NEXT_PUBLIC_FLAGSMITH_KEY: ${{ secrets.FLAGSMITH_KEY }}
      NEXT_PUBLIC_COGNITO_LOGIN_URL: https://staging-auth.blcshine.io/login?client_id=fk2gc4sadrmoqi91voamd6snu&response_type=code&scope=aws.cognito.signin.user.admin+email+openid+profile&redirect_uri=https%3A%2F%2Fwww.staging.bluelightcard.co.uk%2Fauth%2Fcallback.php
      NEXT_PUBLIC_COGNITO_LOGOUT_URL: https://staging-auth.blcshine.io/logout?client_id=fk2gc4sadrmoqi91voamd6snu&response_type=code&scope=aws.cognito.signin.user.admin+email+openid+profile&redirect_uri=https%3A%2F%2Fwww.staging.bluelightcard.co.uk%2Fauth%2Fcallback.php&logout_uri=https%3A%2F%2Fwww.staging.bluelightcard.co.uk%2Flogout.php
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Cache NextJS Build
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/packages/web/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('packages/web/**/*.[jt]s', 'packages/web/**/*.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Build
        run: NEXT_PUBLIC_APP_BRAND=${{matrix.brand}} npm run build -w packages/web
        env:
          NEXT_PUBLIC_IDENTITY_API_URL: https://staging-identity.blcshine.io
          NEXT_PUBLIC_IDENTITY_API_KEY: ${{ secrets[matrix.identity_api_key] }}
          NEXT_PUBLIC_USER_PROFILE_ENDPOINT: /user
          NEXT_PUBLIC_ORGANISATION_ENDPOINT: /${{matrix.identity_brand}}/organisation
          NEXT_PUBLIC_ELIGIBILITY_FORM_OUTPUT_ENDPOINT: /${{matrix.identity_brand}}/formOutputData
      - name: Publish
        uses: cloudflare/pages-action@1
        id: cloudflare-publish
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{matrix.brand}}
          directory: packages/web/out
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  # Put comment on PR
  comment:
    name: Comment on PR
    if: github.actor!= 'dependabot[bot]'
    runs-on: ubuntu-latest
    needs:
      - backend-shared
      - backend-offers
      - backend-redemptions
      - frontend
    steps:
      - name: Find Comment
        uses: peter-evans/find-comment@v2
        if: success() && github.event.number
        id: fc
        with:
          issue-number: ${{ github.event.number }}
          body-includes: 'ðŸš€ Successfully deployed preview environment'

      - name: Create Comment
        uses: peter-evans/create-or-update-comment@v3
        if: success() && github.event.number
        with:
          issue-number: ${{ github.event.number }}
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          body: |
            ## ðŸš€ Successfully deployed preview environment

            <table><tr><td><strong>Latest commit:</strong> </td><td>
            <code>${{ github.sha }}</code>
            </td></tr>
            <tr><td><strong>Status:</strong></td><td>&nbsp;âœ…&nbsp; Deploy successful!</td></tr>
            <tr><td><strong>Preview URL:</strong></td><td>
            <a href='${{ needs.frontend.outputs.url }}'>${{ needs.frontend.outputs.url }}</a>
            </td></tr>
            <tr><td><strong>Identity API URL:</strong></td><td>
            <a href='${{ needs.backend-shared.outputs.identity-api-endpoint }}'>
              ${{ needs.backend-shared.outputs.identity-api-endpoint }}
            </a>
            </td></tr>
            <tr><td><strong>Offers API URL:</strong></td><td>
            <a href='${{ needs.backend-offers.outputs.offers-api-endpoint }}'>
              ${{ needs.backend-offers.outputs.offers-api-endpoint }}
            </a>
            </td></tr>
            <tr><td><strong>Redemptions API URL:</strong></td><td>
            <a href='${{ needs.backend-redemptions.outputs.redemptions-api-endpoint }}'>
              ${{ needs.backend-redemptions.outputs.redemptions-api-endpoint }}
            </a>
            </td></tr>
            </table>

  # Lighthouse Audit of Web frontend
  # TODO: Currently not working with authenticated pages due to being redirected to login page
  # lighthouse:
  #   name: Web Audit using Lighthouse
  #   if: github.actor!= 'dependabot[bot]'
  #   runs-on: ubuntu-latest
  #   needs:
  #     - frontend
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Setup
  #       uses: ./.github/actions/setup
  #     - name: Audit URLs using Lighthouse
  #       uses: treosh/lighthouse-ci-action@v10
  #       id: lighthouse_audit
  #       with:
  #         urls: |
  #           ${{ needs.frontend.outputs.url }}/eligibility
  #         budgetPath: '.github/lighthouse/budget.json'
  #         configPath: '.github/lighthouse/.lighthouserc.json'
  #         uploadArtifacts: true
  #         temporaryPublicStorage: true
  #         runs: 3

  #     - name: Format lighthouse result
  #       id: lighthouse_result
  #       if: ${{ always() }}
  #       uses: actions/github-script@v6
  #       with:
  #         github-token: ${{secrets.GITHUB_TOKEN}}
  #         script: |
  #           const { default: formatLighthouseResult } = await import('${{ github.workspace }}/.github/scripts/formatLighthouseResult.js')
  #           const links = ${{ steps.lighthouse_audit.outputs.links }};
  #           const manifest = ${{ steps.lighthouse_audit.outputs.manifest }}
  #           await formatLighthouseResult({ links, manifest, core })

  #     - name: Format budget result
  #       id: budget_result
  #       if: ${{ always() }}
  #       uses: actions/github-script@v6
  #       with:
  #         github-token: ${{secrets.GITHUB_TOKEN}}
  #         script: |
  #           const { default: formatBudgetResult } = await import('${{ github.workspace }}/.github/scripts/formatBudgetResult.js')
  #           const assertions = ${{ steps.lighthouse_audit.outputs.assertionResults }}
  #           await formatBudgetResult({ assertions, core })

  #     - name: Add Lighthouse comment to PR
  #       id: lighthouse_comment_to_pr
  #       if: ${{ always() }}
  #       uses: marocchino/sticky-pull-request-comment@v2
  #       with:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         number: ${{ github.event.pull_request.number }}
  #         header: lighthouse
  #         message: |
  #           ${{ steps.lighthouse_result.outputs.comment }}

  #     - name: Add Budget comment to PR
  #       id: budget_comment_to_pr
  #       if: ${{ always() }}
  #       uses: marocchino/sticky-pull-request-comment@v2
  #       with:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         number: ${{ github.event.pull_request.number }}
  #         header: budget
  #         message: |
  #           ${{ steps.budget_result.outputs.comment }}
