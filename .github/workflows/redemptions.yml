name: Redemptions
on:
  push:
    branches:
      - main
    paths:
      - packages/api/redemptions/**
      - packages/api/core/**
      - stacks/**
      - .github/workflows/redemptions.yml
      - package-lock.json
      - sst.config.ts
      - package.json
  pull_request:
    paths:
      - packages/api/redemptions/**
      - packages/api/core/**
      - stacks/**
      - .github/workflows/redemptions.yml
      - package-lock.json
      - sst.config.ts
      - package.json

permissions: write-all

jobs:
  install:
    name: Install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
        with:
          restore_cache: false
          token: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Generate SST Types
        env:
          BRAND: BLC_UK
        run: npx sst types --stage staging
      - name: Test
        run: npm run test:unit -w packages/api/redemptions
      - name: Test Cloud flare
        working-directory: "packages/api/redemptions/cloudflare/QRImageGenerator"
        run: npm run test

  format:
    name: Check Formatting
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Check Formatting
        run: npm run format:check -w packages/api/redemptions

  lint:
    name: Check Linting
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Check Linting
        run: npm run lint -w packages/api/redemptions

  typecheck:
    name: Check Types
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Generate SST Types
        env:
          BRAND: BLC_UK
        run: npx sst types --stage staging
      - name: Check Types
        run: npm run typecheck -w packages/api/redemptions

  changelog:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Changelog
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.tag-release.outputs.releases_created }}
    steps:
      - uses: googleapis/release-please-action@v3
        id: tag-release
        with:
          path: packages/api/redemptions
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node
          monorepo-tags: true
          package-name: bluelightcard/redemptions
          changelog-types: '[{"type":"feat","section":"Features","hidden":false},{"type":"fix","section":"Bug Fixes","hidden":false},{"type":"chore","section":"Other Changes","hidden":false},{"type":"refactor","section":"Other Changes","hidden":false}]'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - install
      - test
      - format
      - lint
      - typecheck
      - changelog
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Build
        run: npm run build

  staging:
    name: Staging Deployment
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - install
      - test
      - build
      - changelog
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Configure Non Prod AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::314658777488:role/github-actions-role
          aws-region: eu-west-2
      - name: Get secret
        run: |
          SECRET_NAME=$(aws secretsmanager describe-secret --secret-id blc-mono-redemptions/NewVaultSecrets --query Name --output text)
          echo "SECRET_NAME=$SECRET_NAME" >> $GITHUB_ENV
          echo "DD_VERSION=$(date +%m-%d-%Y)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "DD_ENV=staging" >> $GITHUB_ENV
          echo "DD_GIT_COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "DD_GIT_REPOSITORY_URL=https://github.com/${{ github.repository }}" >> $GITHUB_ENV
        continue-on-error: true
        id: vault-secret
      - name: Update Secret
        if: ${{ env.SECRET_NAME == 'blc-mono-redemptions/NewVaultSecrets' }}
        run: |
          aws secretsmanager put-secret-value \
            --secret-id blc-mono-redemptions/NewVaultSecrets \
            --secret-string '{
              "codeRedeemedData":"${{ secrets.CODE_REDEEMED_DATA }}",
              "codeRedeemedPassword":"${{ secrets.CODE_REDEEMED_PASSWORD }}",
              "assignUserCodesData":"${{ secrets.ASSIGN_USER_CODES_DATA }}",
              "assignUserCodesPassword":"${{ secrets.ASSIGN_USER_CODES_PASSWORD }}",
              "checkAmountIssuedData":"${{ secrets.CHECK_AMOUNT_ISSUED_DATA }}",
              "checkAmountIssuedPassword":"${{ secrets.CHECK_AMOUNT_ISSUED_PASSWORD }}",
              "retrieveAllVaultsData":"${{ secrets.RETRIEVE_ALL_VAULTS_DATA }}",
              "retrieveAllVaultsPassword":"${{ secrets.RETRIEVE_ALL_VAULTS_PASSWORD }}",
              "viewVaultBatchesData":"${{ secrets.VIEW_VAULT_BATCHES_DATA }}",
              "viewVaultBatchesPassword":"${{ secrets.VIEW_VAULT_BATCHES_PASSWORD }}",
              "checkVaultStockData":"${{ secrets.CHECK_VAULT_STOCK_DATA }}",
              "checkVaultStockPassword":"${{ secrets.CHECK_VAULT_STOCK_PASSWORD }}",
              "brazeApiKey":"${{ secrets.BRAZE_API_KEY }}"
            }'
      - name: Create Secret
        if: ${{ env.SECRET_NAME != 'blc-mono-redemptions/NewVaultSecrets' }}
        run: |
          aws secretsmanager create-secret \
            --name blc-mono-redemptions/NewVaultSecrets \
            --secret-string '{
              "codeRedeemedData":"${{ secrets.CODE_REDEEMED_DATA }}",
              "codeRedeemedPassword":"${{ secrets.CODE_REDEEMED_PASSWORD }}",
              "assignUserCodesData":"${{ secrets.ASSIGN_USER_CODES_DATA }}",
              "assignUserCodesPassword":"${{ secrets.ASSIGN_USER_CODES_PASSWORD }}",
              "checkAmountIssuedData":"${{ secrets.CHECK_AMOUNT_ISSUED_DATA }}",
              "checkAmountIssuedPassword":"${{ secrets.CHECK_AMOUNT_ISSUED_PASSWORD }}",
              "retrieveAllVaultsData":"${{ secrets.RETRIEVE_ALL_VAULTS_DATA }}",
              "retrieveAllVaultsPassword":"${{ secrets.RETRIEVE_ALL_VAULTS_PASSWORD }}",
              "viewVaultBatchesData":"${{ secrets.VIEW_VAULT_BATCHES_DATA }}",
              "viewVaultBatchesPassword":"${{ secrets.VIEW_VAULT_BATCHES_PASSWORD }}",
              "checkVaultStockData":"${{ secrets.CHECK_VAULT_STOCK_DATA }}",
              "checkVaultStockPassword":"${{ secrets.CHECK_VAULT_STOCK_PASSWORD }}",
              "brazeApiKey":"${{ secrets.BRAZE_API_KEY }}"
            }'
      - name: Build
        run: npm run build
      - name: Deploy
        env:
          # TODO(TR-383): Get braze keys dynamically later
          BRAZE_VAULT_EMAIL_CAMPAIGN_ID: '${{ vars.BRAZE_VAULT_EMAIL_CAMPAIGN_ID }}'
          BRAZE_GENERIC_EMAIL_CAMPAIGN_ID: '${{ vars.BRAZE_GENERIC_EMAIL_CAMPAIGN_ID }}'
          BRAZE_PRE_APPLIED_EMAIL_CAMPAIGN_ID: '${{ vars.BRAZE_PRE_APPLIED_EMAIL_CAMPAIGN_ID }}'
          BRAZE_API_URL: '${{ vars.BRAZE_API_URL }}'
          BRAND: BLC_UK
          DD_VERSION: '${{ vars.DD_VERSION }}'
          DD_ENV: '${{ vars.DD_ENV }}'
          DD_GIT_COMMIT_SHA: '${{ vars.DD_GIT_COMMIT_SHA }}'
          DD_GIT_REPOSITORY_URL: '${{ vars.DD_GIT_COMMIT_SHA }}'
          DD_API_KEY: '${{ secrets.DATADOG_BLC_UK_CLIENT_TOKEN }}'
          USE_DATADOG_AGENT: 'true'
        run: npx sst deploy global --stage staging && npx sst deploy redemptions --stage staging
      - name: Deploy Spec
        env:
          REDOCLY_AUTHORIZATION: ${{ secrets.REDOCLY_AUTHORIZATION }}
        run: npm run -s oas -w packages/api/redemptions  --region=eu-west-2 --stage=staging --api-version=v1
      - name: Datadog deployment metrics
        uses: ./.github/actions/datadog
        with:
          environment: 'staging'
          service_name: 'redemptions'
          workflow_run_id: ${{ github.run_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DATADOG_DORA_METRICS_CLIENT_TOKEN: ${{ secrets.DATADOG_DORA_METRICS_CLIENT_TOKEN }}

  e2e-redemptions:
    name: Run E2E tests (redemptions)
    runs-on: ubuntu-latest
    needs:
      - install
      - staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Configure Non Prod AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::314658777488:role/github-actions-role
          aws-region: eu-west-2
      - name: Install Session Manager Plugin
        run: |
          curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
          sudo dpkg -i session-manager-plugin.deb
      - name: Run E2E tests
        working-directory: packages/api/redemptions
        env:
          REDEMPTIONS_DATABASE_PORT: 5432
          REDEMPTIONS_DATABASE_NAME: redemptions
          REDEMPTIONS_DATABASE_TYPE: AURORA_PG_CLUSTER
          BRAND: BLC_UK
        run: npx sst bind --stage staging vitest

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.changelog.outputs.releases_created
    name: Release
    environment: Production
    runs-on: ubuntu-latest
    strategy:
      matrix:
        deployment:
          - brand: BLC_UK
            region: eu-west-2
            stage: production
          - brand: BLC_AU
            region: ap-southeast-2
            stage: production
    needs:
      - install
      - test
      - staging
      - changelog
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Configure Prod AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ matrix.deployment.region }}
          role-to-assume: arn:aws:iam::676719682338:role/github-action-role
      - name: Get secret
        run: |
          SECRET_NAME=$(aws secretsmanager describe-secret --secret-id blc-mono-redemptions/NewVaultSecrets --query Name --output text)
          echo "SECRET_NAME=$SECRET_NAME" >> $GITHUB_ENV
        continue-on-error: true
        id: vault-secret
      - name: Update Secret
        if: ${{ env.SECRET_NAME == 'blc-mono-redemptions/NewVaultSecrets' }}
        run: |
          aws secretsmanager put-secret-value \
            --secret-id blc-mono-redemptions/NewVaultSecrets \
            --secret-string '{
              "codeRedeemedData":"${{ secrets.CODE_REDEEMED_DATA }}",
              "codeRedeemedPassword":"${{ secrets.CODE_REDEEMED_PASSWORD }}",
              "assignUserCodesData":"${{ secrets.ASSIGN_USER_CODES_DATA }}",
              "assignUserCodesPassword":"${{ secrets.ASSIGN_USER_CODES_PASSWORD }}",
              "checkAmountIssuedData":"${{ secrets.CHECK_AMOUNT_ISSUED_DATA }}",
              "checkAmountIssuedPassword":"${{ secrets.CHECK_AMOUNT_ISSUED_PASSWORD }}",
              "retrieveAllVaultsData":"${{ secrets.RETRIEVE_ALL_VAULTS_DATA }}",
              "retrieveAllVaultsPassword":"${{ secrets.RETRIEVE_ALL_VAULTS_PASSWORD }}",
              "viewVaultBatchesData":"${{ secrets.VIEW_VAULT_BATCHES_DATA }}",
              "viewVaultBatchesPassword":"${{ secrets.VIEW_VAULT_BATCHES_PASSWORD }}",
              "checkVaultStockData":"${{ secrets.CHECK_VAULT_STOCK_DATA }}",
              "checkVaultStockPassword":"${{ secrets.CHECK_VAULT_STOCK_PASSWORD }}",
              "brazeApiKey":"${{ secrets.BRAZE_API_KEY }}"
            }'
      - name: Create Secret
        if: ${{ env.SECRET_NAME != 'blc-mono-redemptions/NewVaultSecrets' }}
        run: |
          aws secretsmanager create-secret \
            --name blc-mono-redemptions/NewVaultSecrets \
            --secret-string '{
              "codeRedeemedData":"${{ secrets.CODE_REDEEMED_DATA }}",
              "codeRedeemedPassword":"${{ secrets.CODE_REDEEMED_PASSWORD }}",
              "assignUserCodesData":"${{ secrets.ASSIGN_USER_CODES_DATA }}",
              "assignUserCodesPassword":"${{ secrets.ASSIGN_USER_CODES_PASSWORD }}",
              "checkAmountIssuedData":"${{ secrets.CHECK_AMOUNT_ISSUED_DATA }}",
              "checkAmountIssuedPassword":"${{ secrets.CHECK_AMOUNT_ISSUED_PASSWORD }}",
              "retrieveAllVaultsData":"${{ secrets.RETRIEVE_ALL_VAULTS_DATA }}",
              "retrieveAllVaultsPassword":"${{ secrets.RETRIEVE_ALL_VAULTS_PASSWORD }}",
              "viewVaultBatchesData":"${{ secrets.VIEW_VAULT_BATCHES_DATA }}",
              "viewVaultBatchesPassword":"${{ secrets.VIEW_VAULT_BATCHES_PASSWORD }}",
              "checkVaultStockData":"${{ secrets.CHECK_VAULT_STOCK_DATA }}",
              "checkVaultStockPassword":"${{ secrets.CHECK_VAULT_STOCK_PASSWORD }}",
              "brazeApiKey":"${{ secrets.BRAZE_API_KEY }}"
            }'
      - name: Build
        run: npm run build
      - name: Deploy
        env:
          BRAND: ${{ matrix.deployment.brand }}
        run: npx sst deploy global --stage ${{matrix.deployment.stage}} --region ${{matrix.deployment.region}} && npx sst deploy redemptions --stage ${{matrix.deployment.stage}} --region ${{matrix.deployment.region}}
      - name: Deploy Spec
        env:
          REDOCLY_AUTHORIZATION: ${{ secrets.REDOCLY_AUTHORIZATION }}
        run: npm run -s oas -w packages/api/redemptions --region=${{matrix.deployment.region}} --stage=${{matrix.deployment.stage}} --api-version=v1
      - name: Datadog deployment metrics
        uses: ./.github/actions/datadog
        with:
          environment: 'production'
          service_name: 'redemptions'
          workflow_run_id: ${{ github.run_id }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DATADOG_DORA_METRICS_CLIENT_TOKEN: ${{ secrets.DATADOG_DORA_METRICS_CLIENT_TOKEN }}
